plugins {
    id 'java-library'
    id 'jacoco'
    id 'checkstyle'
    id 'com.diffplug.spotless' version '6.18.0'
    id 'signing'
    id 'maven-publish'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'org.owasp.dependencycheck' version '8.2.1'
    id 'com.github.spotbugs' version '5.0.14'
    id 'com.github.ben-manes.versions' version '0.46.0'
}

repositories {
    mavenCentral()
    mavenLocal()
}

configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'ch.qos.logback', module: 'logback-classic'
    }
}

group = 'ee.datanor.spring.logger'
version = '1.0.2'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withJavadocJar()
    withSourcesJar()
}

artifacts {
    archives javadocJar, sourcesJar
}

nexusPublishing {
    repositories {
        sonatype {  //only for users registered in Sonatype after 24 Feb 2021
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            pom {
                name = 'spring-access-logger'
                description = 'Spring Boot access logger'
                url = 'https://github.com/datanor/spring-access-logger'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'priittalisoo'
                        name = 'Priit Talisoo'
                        email = 'priit.talisoo@datanor.ee'
                    }
                }
                scm {
                    url = 'https://github.com/datanor/spring-access-logger'
                    connection = 'scm:git://github.com/datanor/spring-access-logger.git'
                    developerConnection = 'scm:git://github.com/datanor/spring-access-logger.git'
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

ext.genOutputDir = file("$buildDir/generated-resources")

task generateVersionTxt()  {
    ext.outputFile = file("$genOutputDir/version.txt")
    outputs.file(outputFile)
    doLast {
        outputFile.text = """GroupId: ${project.group}
Name: ${project.name}
Version: $version
Build-time: ${java.time.LocalDateTime.now()}
"""
    }
}

sourceSets.main.output.dir genOutputDir, builtBy: generateVersionTxt

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    implementation 'org.slf4j:slf4j-api:2.0.7'
    implementation 'org.springframework:spring-web:6.0.8'
    implementation 'org.springframework:spring-context:6.0.8'
    implementation 'org.apache.tomcat.embed:tomcat-embed-core:10.1.7'
    implementation 'org.apache.commons:commons-text:1.10.0'

    testImplementation 'org.mockito:mockito-core:5.3.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.3.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.2'
    testImplementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    testImplementation 'org.apache.logging.log4j:log4j-slf4j2-impl:2.20.0'
    testImplementation 'org.springframework:spring-test:6.0.8'
    testImplementation 'commons-io:commons-io:2.11.0'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
}

tasks.withType(Test) {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.compilerArgs.addAll([
            '-Xlint:all', '-Werror',
            '-Xlint:-deprecation',
            '-Xlint:-processing',
            '-Xlint:-classfile'
    ])
}

checkstyle {
    ignoreFailures = false
    maxWarnings = 0
}

checkstyleMain {
    source = fileTree('src/main/java')
}

spotbugs {
    reportLevel = 'high'
    includeFilter = new File("${rootDir}/config/spotbugs/includeFilter.xml")
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

spotless {
    format 'misc', {
        target '*.gradle', '*.md', '.gitignore'
        trimTrailingWhitespace()
        indentWithSpaces()
    }
}
